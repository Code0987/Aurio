{"name":"Aurio","tagline":"Audio Fingerprinting & Retrieval for .NET","body":"Aurio: Audio Processing, Analysis and Retrieval\r\n===============================================\r\n\r\nAurio is a .NET library that focuses on audio processing, analysis, media synchronization and media retrieval and implements various audio fingerprinting methods. It has been developed for research purposes and is a by-product of the media synchronization application [AudioAlign](https://github.com/protyposis/AudioAlign).\r\n\r\n\r\nFeatures\r\n--------\r\n\r\n* 32-bit floating point audio processing engine\r\n* File I/O through NAudio and FFmpeg\r\n* Audio playback through NAudio\r\n* FFT through PFFFT, FFTW (optional) and Exocortex.DSP (optional)\r\n* Resampling through Soxr and SecretRabbitCode/libsamplerate (optional)\r\n* STFT\r\n* Chroma\r\n* Dynamic Time Warping\r\n* On-line Time Warping (Dixon, Simon. \"Live tracking of musical performances using on-line time warping.\" Proceedings of the 8th International Conference on Digital Audio Effects. 2005.)\r\n* Fingerprinting\r\n *  Haitsma, Jaap, and Ton Kalker. \"A highly robust audio fingerprinting system.\" ISMIR. 2002.\r\n *  Wang, Avery. \"An Industrial Strength Audio Search Algorithm.\" ISMIR. 2003.\r\n *  [Echoprint](http://echoprint.me/codegen) (Ellis, Daniel PW, Brian Whitman, and Alastair Porter. \"Echoprint: An open music identification service.\" ISMIR. 2011.)\r\n *  AcoustID [Chromaprint](https://acoustid.org/chromaprint)\r\n\r\nAll audio processing (incl. fingerprinting) is stream-based and supports processing of arbitrarily long streams at constant memory usage. All fingerprinting methods are implemented from scratch, not ports from exisiting libraries, while keeping compatibility where possible.\r\n\r\nAurio.WaveControls provides WPF widgets for user interfaces:\r\n\r\n* Spectrogram / Chromagram View\r\n* Spectrum / Graph View\r\n* VU Meter\r\n* Correlometer\r\n* Time Scale\r\n* Wave View\r\n\r\n\r\nRequirements\r\n------------\r\n\r\n* Windows\r\n* Visual Studio 2013\r\n* .NET Framework 4.0\r\n\r\nAurio has been developed for Windows but since only a small part depends on the OS, it should be portable to the Mono platform and other OS'.\r\n\r\n\r\nBuild Instructions\r\n------------------\r\n\r\nAurio comes with all required dependencies except for FFmpeg (which would blow up the repo size too much). See `libs\\ffmpeg\\ffmpeg-prepare.txt` for instructions on how to download and where to put FFmpeg.\r\n\r\nBuilding works as easy as building any other Visual Studio solution and should work without problems if all dependencies have been set up correctly. Open the Visual Studio solution `Aurio\\Aurio.sln` in Visual Studio 2013 and build the `Aurio` project and optionally the `Aurio.WaveControls` project. The compiled DLLs will be built in each project's `bin` folder.\r\n\r\n\r\nDocumentation\r\n-------------\r\n\r\nNot available yet. If you have any questions, feel free to open an issue!\r\n\r\n\r\nExamples\r\n--------\r\n\r\n### Reading, Processing & Writing\r\n\r\n```csharp\r\n/* Read a high definition MKV video file with FFmpeg, \r\n * convert it to telephone sound quality, \r\n * and write it to a WAV file with NAudio. */\r\nvar sourceStream = new FFmpegSourceStream(new FileInfo(\"high-definition-video.mkv\"));\r\nvar ieee32BitStream = new IeeeStream(sourceStream);\r\nvar monoStream = new MonoStream(ieee32BitStream);\r\nvar resamplingStream = new ResamplingStream(monoStream, ResamplingQuality.Low, 8000);\r\nvar sinkStream = new NAudioSinkStream(resamplingStream);\r\nWaveFileWriter.CreateWaveFile(\"telephone-audio.wav\", sinkStream);\r\n```\r\n\r\n### Short-time Fourier Transform\r\n\r\n```csharp\r\n// Setup STFT with a window size of 100ms and an overlap of 50ms\r\nvar source = AudioStreamFactory.FromFileInfoIeee32(new FileInfo(\"somefilecontainingaudio.ext\"));\r\nvar windowSize = source.Properties.SampleRate/10;\r\nvar hopSize = windowSize/2;\r\nvar stft = new STFT(source, windowSize, hopSize, WindowType.Hann);\r\nvar spectrum = new float[windowSize/2];\r\n\r\n// Read all frames and get their spectrum\r\nwhile (stft.HasNext()) {\r\n    stft.ReadFrame(spectrum);\r\n    // do something with the spectrum (e.g. build spectrogram)\r\n}\r\n```\r\n\r\n### Generate fingerprints\r\n\r\n```csharp\r\n// Setup the source (AudioTrack is Aurio's internal representation of an audio file)\r\nvar audioTrack = new AudioTrack(new FileInfo(\"somefilecontainingaudio.ext\"));\r\n\r\n// Setup the fingerprint generator (each fingerprinting algorithms has its own namespace but works the same)\r\nvar defaultProfile = FingerprintGenerator.GetProfiles()[0]; // the first one is always the default profile\r\nvar generator = new FingerprintGenerator(defaultProfile);\r\n\r\n// Setup the generator event listener\r\ngenerator.SubFingerprintsGenerated += (sender, e) => {\r\n    // Print the hashes\r\n    e.SubFingerprints.ForEach(sfp => Console.WriteLine(\"{0,10}: {1}\", sfp.Index, sfp.Hash));\r\n};\r\n\r\n// Generate fingerprints for the whole track\r\ngenerator.Generate(audioTrack);\r\n```\r\n\r\n### Fingerprinting & Matching\r\n\r\n```csharp\r\n// Setup the sources\r\nvar audioTrack1 = new AudioTrack(new FileInfo(\"somefilecontainingaudio1.ext\"));\r\nvar audioTrack2 = new AudioTrack(new FileInfo(\"somefilecontainingaudio2.ext\"));\r\n\r\n// Setup the fingerprint generator\r\nvar defaultProfile = FingerprintGenerator.GetProfiles()[0];\r\nvar generator = new FingerprintGenerator(defaultProfile);\r\n\r\n// Create a fingerprint store\r\nvar store = new FingerprintStore(defaultProfile);\r\n\r\n// Setup the generator event listener (a subfingerprint is a hash with its temporal index)\r\ngenerator.SubFingerprintsGenerated += (sender, e) => {\r\n    var progress = (double)e.Index / e.Indices;\r\n    var hashes = e.SubFingerprints.Select(sfp => sfp.Hash);\r\n    store.Add(e);\r\n};\r\n\r\n// Generate fingerprints for both tracks\r\ngenerator.Generate(audioTrack1);\r\ngenerator.Generate(audioTrack2);\r\n\r\n// Check if tracks match\r\nif (store.FindAllMatches().Count > 0) {\r\n   Console.WriteLine(\"overlap detected!\"); \r\n}\r\n```\r\n\r\n### Multitrack audio playback\r\n\r\n```csharp\r\nvar drumTrack = new AudioTrack(new FileInfo(\"drums.wav\"));\r\nvar guitarTrack = new AudioTrack(new FileInfo(\"guitar.wav\"));\r\nvar vocalTrack = new AudioTrack(new FileInfo(\"vocals.wav\"));\r\nvar band = new TrackList<AudioTrack>(new[] {drumTrack, guitarTrack, vocalTrack});\r\n\r\nnew MultitrackPlayer(band).Play();\r\n```\r\n\r\nExample Applications\r\n--------------------\r\n\r\nAurio comes with a few tools and test applications that can be taken as a reference:\r\n\r\n* **Aurio.Test.FingerprintingBenchmark** runs a file through all fingerprinting algorithms and measures the required time.\r\n* **Aurio.Test.FingerprintingHaitsmaKalker** fingerprints files and builds a hash store to match the fingerprinted files. The matches can be browsed and fingerprints inspected.\r\n* **Aurio.Test.FingerprintingWang2003** display the spectrogram and constellation map while fingerprinting a file.\r\n* **Aurio.Test.WaveViewControl** is a test bed for the WaveView WPF control.\r\n* **Aurio.Test.MultitrackPlayback** is a multitrack audio player with a simple user interface.\r\n* **BatchResampler** resamples wave files according to a configuration file.\r\n* **MusicDetector** analyzes audio files for music content.\r\n* **WaveCutter** cuts a number of concatenated files into slices of random length.\r\n\r\nAurio has originally been developed for [AudioAlign](https://github.com/protyposis/AudioAlign), a tool to automatically synchronize overlapping audio and video recordings, which uses almost all functionality of Aurio. Its sources are also available and can be used as a implementation reference.\r\n\r\n\r\nPatents\r\n-------\r\n\r\nThe fingerprinting methods by Haitsma&Kalker and Wang are protected worldwide, and Echoprint is protected in the US by patents. Their usage is therefore severely limited. In Europe, patented methods can be used privately or for research purposes.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (C) 2010-2015 Mario Guggenberger <mg@protyposis.net>.\r\nThis project is released under the terms of the GNU Affero General Public License. See `LICENSE` for details. The library can be built to be free of any copyleft requirements; get in touch if the AGPL does not suit your needs.\r\n","google":"UA-52949511-2","note":"Don't delete this file! It's used internally to help with page regeneration."}